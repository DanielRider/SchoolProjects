{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1Riy9GLWGlXpeF-e_GsJaNwHd8SPjg53u","timestamp":1689012052081}],"mount_file_id":"1Riy9GLWGlXpeF-e_GsJaNwHd8SPjg53u","authorship_tag":"ABX9TyPr4niBPkIhz2UrP7a8XdeL"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Adjusted code from the openAI cookbook for clustering. Found here https://github.com/openai/openai-cookbook/blob/main/examples/Clustering.ipynb\n","\n","by Daniel Rider"],"metadata":{"id":"xkIHajGQmGhz"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WKS_83Q2hoDZ","executionInfo":{"status":"ok","timestamp":1689005919990,"user_tz":300,"elapsed":6146,"user":{"displayName":"Daniel Rider","userId":"04019406679242190719"}},"outputId":"2e5b44ce-c88b-470f-fc03-3de844817383"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(841, 1536)"]},"metadata":{},"execution_count":1}],"source":["# imports\n","import numpy as np\n","import pandas as pd\n","\n","# load data\n","datafile_path = \"/content/drive/MyDrive/Colab Notebooks/Copy of search_results_ada002_embeddings.csv\"\n","\n","df = pd.read_csv(datafile_path)\n","df[\"embedding\"] = df.embedding.apply(eval).apply(np.array)  # convert string to numpy array\n","matrix = np.vstack(df.embedding.values)\n","matrix.shape"]},{"cell_type":"markdown","source":["# First Attempt at Clustering"],"metadata":{"id":"Pk0QhQnKo3JY"}},{"cell_type":"code","source":["from sklearn.cluster import KMeans\n","\n","n_clusters = 4\n","\n","kmeans = KMeans(n_clusters=n_clusters, init=\"k-means++\", random_state=42)\n","kmeans.fit(matrix)\n","labels = kmeans.labels_\n","df[\"Cluster\"] = labels\n","\n","df.head(20)"],"metadata":{"id":"JPb8bm78mPX_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.manifold import TSNE\n","import matplotlib\n","import matplotlib.pyplot as plt\n","\n","tsne = TSNE(n_components=2, perplexity=15, random_state=42, init=\"random\", learning_rate=200)\n","vis_dims2 = tsne.fit_transform(matrix)\n","\n","x = [x for x, y in vis_dims2]\n","y = [y for x, y in vis_dims2]\n","\n","for category, color in enumerate([\"purple\", \"green\", \"red\", \"blue\"]):\n","    xs = np.array(x)[df.Cluster == category]\n","    ys = np.array(y)[df.Cluster == category]\n","    plt.scatter(xs, ys, color=color, alpha=0.3)\n","\n","    avg_x = xs.mean()\n","    avg_y = ys.mean()\n","\n","    plt.scatter(avg_x, avg_y, marker=\"x\", color=color, s=100)\n","plt.title(\"Clusters identified visualized in language 2d using t-SNE\")"],"metadata":{"id":"tnNEZOD8mUTn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Lets see what PCA looks like\n","from sklearn.decomposition import PCA\n","\n","# Apply PCA\n","pca = PCA(n_components=2, random_state=42)\n","vis_dims2 = pca.fit_transform(matrix)\n","\n","x = [x for x, y in vis_dims2]\n","y = [y for x, y in vis_dims2]\n","\n","for category, color in enumerate([\"purple\", \"green\", \"red\", \"blue\"]):\n","    xs = np.array(x)[df.Cluster == category]\n","    ys = np.array(y)[df.Cluster == category]\n","    plt.scatter(xs, ys, color=color, alpha=0.3)\n","\n","    avg_x = xs.mean()\n","    avg_y = ys.mean()\n","\n","    plt.scatter(avg_x, avg_y, marker=\"x\", color=color, s=100)\n","plt.title(\"Clusters identified visualized in language 2d using PCA\")\n"],"metadata":{"id":"_CQ2t4-2rSPU"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["I want to experiment with different numbers of clusters."],"metadata":{"id":"Bpc-nej3o91G"}},{"cell_type":"markdown","source":["# Exploratory Silhoutte Score Plus Viz of different Number of Clusters\n"],"metadata":{"id":"Cb-6xOBhpGFY"}},{"cell_type":"code","source":["from sklearn.cluster import KMeans\n","from sklearn.metrics import silhouette_score\n","import matplotlib.pyplot as plt\n","\n","X = matrix\n","range_n_clusters = [2, 3, 4, 5, 6,7,8,9,10]\n","\n","for n_clusters in range_n_clusters:\n","    clusterer = KMeans(n_clusters=n_clusters, n_init=\"auto\", random_state=42)\n","    cluster_labels = clusterer.fit_predict(X)\n","\n","    # The silhouette_score gives the average value for all the samples.\n","    # This gives a perspective into the density and separation of the formed\n","    # clusters\n","    silhouette_avg = silhouette_score(X, cluster_labels)\n","    print(\n","        \"For n_clusters =\",\n","        n_clusters,\n","        \"The average silhouette_score is :\",\n","        silhouette_avg,\n","    )\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TrUDq8KaoMmh","executionInfo":{"status":"ok","timestamp":1689011241063,"user_tz":300,"elapsed":2605,"user":{"displayName":"Daniel Rider","userId":"04019406679242190719"}},"outputId":"71a06c73-0f91-44b7-f986-62f23756e4a3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["For n_clusters = 2 The average silhouette_score is : 0.048681096825526605\n","For n_clusters = 3 The average silhouette_score is : 0.04106726279679119\n","For n_clusters = 4 The average silhouette_score is : 0.04104405599108009\n","For n_clusters = 5 The average silhouette_score is : 0.032467537664291814\n","For n_clusters = 6 The average silhouette_score is : 0.022774574804199834\n","For n_clusters = 7 The average silhouette_score is : 0.032402636379491645\n","For n_clusters = 8 The average silhouette_score is : 0.032436799548822615\n","For n_clusters = 9 The average silhouette_score is : 0.03293864933911264\n","For n_clusters = 10 The average silhouette_score is : 0.03173223423691164\n"]}]},{"cell_type":"markdown","source":["Honestly, The silhouette score is near zero every time anyways.  Considering that the range is [-1,1] where 1 is the absolute best.  I dont think silhouette is telling us anything worthwhile."],"metadata":{"id":"xwBLuxF0zlJo"}},{"cell_type":"markdown","source":["# Some viz for fun"],"metadata":{"id":"xWQlD11sE-wn"}},{"cell_type":"code","source":["from sklearn.cluster import KMeans\n","from sklearn.manifold import TSNE\n","import matplotlib.pyplot as plt\n","\n","cluster_range = range(3, 7)  # change this to whatever range you want\n","\n","for n_clusters in cluster_range:\n","    # run k-means\n","    kmeans = KMeans(n_clusters=n_clusters, init=\"k-means++\", random_state=42)\n","    kmeans.fit(matrix)\n","    labels = kmeans.labels_\n","    df[\"Cluster\"] = labels\n","\n","    # apply t-SNE\n","    tsne = TSNE(n_components=2, perplexity=15, random_state=42, init=\"random\", learning_rate=200)\n","    vis_dims2 = tsne.fit_transform(matrix)\n","\n","    x = [x for x, y in vis_dims2]\n","    y = [y for x, y in vis_dims2]\n","\n","    # plot\n","    plt.figure(figsize=(6, 6))  # creating a new figure for each plot\n","    colors = [\"purple\", \"green\", \"red\", \"blue\", \"orange\", \"black\", \"yellow\"]  # adding more colors for more clusters\n","    for category, color in enumerate(colors[:n_clusters]):\n","        xs = np.array(x)[df.Cluster == category]\n","        ys = np.array(y)[df.Cluster == category]\n","        plt.scatter(xs, ys, color=color, alpha=0.3)\n","\n","        avg_x = xs.mean()\n","        avg_y = ys.mean()\n","\n","        plt.scatter(avg_x, avg_y, marker=\"x\", color=color, s=100)\n","\n","    plt.title(f\"Clusters identified visualized in language 2d using t-SNE (n_clusters = {n_clusters})\")\n","    plt.show()\n"],"metadata":{"id":"vpf0JgEky_F-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Heres the same but with PCA for fun\n","from sklearn.cluster import KMeans\n","from sklearn.manifold import TSNE\n","import matplotlib.pyplot as plt\n","\n","cluster_range = range(3, 7)  # change this to whatever range you want\n","\n","for n_clusters in cluster_range:\n","    # run k-means\n","    kmeans = KMeans(n_clusters=n_clusters, init=\"k-means++\", random_state=42)\n","    kmeans.fit(matrix)\n","    labels = kmeans.labels_\n","    df[\"Cluster\"] = labels\n","\n","    # apply t-SNE\n","    pca = PCA(n_components=2, random_state=42)\n","    vis_dims2 = pca.fit_transform(matrix)\n","\n","    x = [x for x, y in vis_dims2]\n","    y = [y for x, y in vis_dims2]\n","\n","    # plot\n","    plt.figure(figsize=(6, 6))  # creating a new figure for each plot\n","    colors = [\"purple\", \"green\", \"red\", \"blue\", \"orange\", \"black\", \"yellow\"]  # adding more colors for more clusters\n","    for category, color in enumerate(colors[:n_clusters]):\n","        xs = np.array(x)[df.Cluster == category]\n","        ys = np.array(y)[df.Cluster == category]\n","        plt.scatter(xs, ys, color=color, alpha=0.3)\n","\n","        avg_x = xs.mean()\n","        avg_y = ys.mean()\n","\n","        plt.scatter(avg_x, avg_y, marker=\"x\", color=color, s=100)\n","\n","    plt.title(f\"Clusters identified visualized in language 2d using t-SNE (n_clusters = {n_clusters})\")\n","    plt.show()"],"metadata":{"id":"2Rdunlpsv38m"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Ask ChatGPT to label our clusters\n"],"metadata":{"id":"n-vAtCxZ1-B8"}},{"cell_type":"markdown","source":["Here we could input a couple responses into the API and then ask chatGPT to label them for us.  Which is what they do in https://github.com/openai/openai-cookbook/blob/main/examples/Clustering.ipynb\n","\n","To save on cost I'm just going to do it manually.  The process will be take the first 5 responses from each cluster, and input the following prompt into the chatGPT+ GUI:\n","\n","\"What do the following focus group responses have in common? Respond using less than 64 tokens.\n","\n","Focus Group Responses:\n","\"\"\"\n","{Responses}\n","\"\"\"\n","\n","Theme: \"\n"],"metadata":{"id":"h_0ZP2qo26SZ"}},{"cell_type":"code","source":["#Run this code again if you ran the k-exploratory code to make sure the cluster number is correct\n","\n","from sklearn.cluster import KMeans\n","\n","n_clusters = 4\n","\n","kmeans = KMeans(n_clusters=n_clusters, init=\"k-means++\", random_state=42)\n","kmeans.fit(matrix)\n","labels = kmeans.labels_\n","df[\"Cluster\"] = labels\n","\n","df.head(20)"],"metadata":{"id":"uPGpTpzN7ayh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.head(20)"],"metadata":{"id":"HAnpFghp6oFh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["rev_per_cluster = 5\n","\n","for i in range(n_clusters):\n","\n","    print(f\"Cluster {i}\")\n","    sample_cluster_rows = df[df.Cluster == i].sample(rev_per_cluster, random_state=42)\n","    for j in range(rev_per_cluster):\n","      print(sample_cluster_rows.index.values[j], end=\": \")\n","      print(sample_cluster_rows.text.values[j])\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XFyyOfgg2DHZ","executionInfo":{"status":"ok","timestamp":1689011592202,"user_tz":300,"elapsed":120,"user":{"displayName":"Daniel Rider","userId":"04019406679242190719"}},"outputId":"c95261ea-8856-4397-b387-9cdc5338240b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Cluster 0\n","286: It is hard to find trust for health but I would personally take mine with a doctor who is positioned In giving real and good personal information and facts\n","290: I agree with you Avril that the social media is not the best way to take the information from. We have to ask people who is working on the hopita.s because they see many  critical situations regarding covid 19\n","48: Sometimes the news can be misleading\n","374: you should a lot of many different information I trust many sorts of different information with Miley dipped in Orange close family members people I'm close to the lot\n","211: I get a lot of health information from the health department and from TV\n","Cluster 1\n","786: Not save others, first save yourself, then others. Maybe they will follow if they know that you have gotten it and are still alive.\n","330: Me and my children live a pretty nice lifestyle healthy and all I don't feel like we need that I feel like we take all precautions to avoid it and if I ever am forced to take it I would rather just die.\n","31: Its a collective responsibility because its a global pandemic not a simple sickness that occasionally transmits from one person to another. People have a responsibility to protect other people\n","759: Yes. I have had neighbors to die of COVID or health issues that COVID made deadly.\n","43: I think most people are looking at it positively but people few people might think otherwise because of the fact that it is mandatory and they are not given any freedom of choice.\n","Cluster 2\n","248: I think one of the main motivations for people is to learn about the actual research that has went in to the findings of the vaccine. I think a lot of people are reluctant right now because they think that there hasn't been enough research about different side effects that could come from the vaccines. So I think if people can see the research that went on I'm coming up with these vaccines, they wouldn't be as reluctant to get the vaccinations.\n","696: They want us to take this shot but they only know 1% about why don't they take it to give it to their children I'm just not going to take it and give it to mine it's not reliable it's not Dependable people are dying whether they take it or not I'll take my chances without it the doctors don't even have any healing our coping strategy for patients who have covid could you send them home and let them die that's totally unacceptable therefore people are resorting what they know they're resorting to God\n","793: Life  depend on it get vaccine everybody family so we'll\n","32: I think it is a collective responsibility to take the vaccine because it is not something that if you catch it, it’s with you. It has the responsibility to save yourself as well as save others to get affected\n","336: I think that informing the people that it is safe and with lots of testimony the kids can have the chance to not get sick I tnink they should get 10,000 per person to take the shot\n","Cluster 3\n","92: I'm fine\n","624: It just very very sad and depressing very depressing\n","765: Drink water\n","682: No preference\n","740: more information\n"]}]},{"cell_type":"markdown","source":["Cluster 0: `The common theme in these focus group responses is the skepticism towards media sources and preference for trustworthy, personalized, or professional sources for health information.`\n","\n","Cluster 1: `These responses all discuss personal experiences, perspectives, or beliefs regarding COVID-19, its impact, and the individual's role in mitigating its spread.`\n","\n","Cluster 2:\n","`These responses all relate to perceptions, concerns, and motivations about the COVID-19 vaccine, reflecting a mix of trust, skepticism, and proposed incentives for vaccination.`\n","\n","Cluster 3:\n","`These responses do not share a common theme. They each express different sentiments or requests, spanning from general feelings to advice or information needs.`\n","\n","\n","https://chat.openai.com/share/7577b370-ad35-4c0b-843e-f5bda5d3d728\n","\n","\n","\n","\n","\n","\n"],"metadata":{"id":"frMel3ha88mt"}}]}